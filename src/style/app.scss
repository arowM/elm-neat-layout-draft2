@use "variables" as *;

.red {
  border: solid 1px red;
  background-color: #fee;
}

.blue {
  border: solid 1px blue;
  background-color: #eef;
}

.header {
  background: #333;

  &_hamburger {
    background: #999;
    color: #333;
  }
}

.footer {
  background: #033;
}


.elmNeatLayout {
  $prefix: &;
  $boundary: #{$prefix}--boundary;
  $boundaryCore: #{$boundary}_core;
  $boundaryContent: #{$prefix}--boundaryContent;
  $row: #{$prefix}--row;
  $rowChild: #{$prefix}--rowChild;
  $column: #{$prefix}--column;
  $columnChild: #{$prefix}--columnChild;
  $heightFlex: #{$prefix}--heightFlex;
  $heightMaxSize: #{$prefix}--heightMaxSize;
  $heightMinSize: #{$prefix}--heightMinSize;
  $widthFlex: #{$prefix}--widthFlex;
  $widthMaxSize: #{$prefix}--widthMaxSize;
  $widthMinSize: #{$prefix}--widthMinSize;

  &--top {
    display: block;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    overflow: hidden;
    min-width: var(--min-height);
    max-width: var(--max-height);
    min-height: var(--min-height);
    max-height: var(--max-height);
  }

  &--overlay {
    display: block;
    position: absolute;
    pointer-events: none;
    top: var(--overlay-top);
    bottom: var(--overlay-bottom);
    left: var(--overlay-left);
    right: var(--overlay-right);
    z-index: var(--overlay-priority);
    overflow: hidden;
    min-width: var(--min-height);
    max-width: var(--max-height);
    min-height: var(--min-height);
    max-height: var(--max-height);
  }

  &--boundary {
    padding: calc(var(--outer-gap-y) / 2) calc(var(--outer-gap-x) / 2);

    & > #{$boundaryCore} {
      overflow: hidden;
      height: 100%;
      width: 100%;

      &-hasOverlays {
        position: relative;
      }

      &-enforcePointerEvent {
        pointer-events: auto;
      }

      & > #{$boundary}_scroller {
        height: 100%;
        width: 100%;

        &-verticalScroll > #{$boundaryContent}::after {
          display: block;
          content: '';
          padding-top: calc(var(--inner-gap-y) / 2);
        }
      }

      &#{$boundaryCore}-view, &#{$boundaryCore} > #{$boundary}_scroller {
        padding: calc(var(--inner-gap-y) / 2) calc(var(--inner-gap-x) / 2);
      }

      &#{$boundaryCore}-text {
          margin: calc(var(--outer-gap-y) / -2) 0;

        & > #{$boundaryCore}_text {
          display: inline-block;
          line-height: calc(1em + var(--outer-gap-y));
        }
      }
    }

    &#{$prefix}--horizontalOverflow {
      & > #{$boundaryCore} {
        overflow-x: auto;
      }
    }

    &#{$prefix}--verticalOverflow {
      & > #{$boundaryCore} {
        overflow-y: auto;
      }
    }
  }

  &--row {
    flex-wrap: nowrap;

    &#{$row}-wrap {
      flex-wrap: wrap;
    }

    &#{$row}-justifyStart {
      justify-content: flex-start;
    }

    &#{$row}-justifyCenter {
      justify-content: center;
    }

    &#{$row}-justifyEnd {
      justify-content: flex-end;
    }

    &#{$widthFlex}, &#{$widthMaxSize} {
      display: flex;
      flex-direction: row;

      & > #{$rowChild} {
        width: auto;
        flex-grow: 0;
        flex-shrink: 0;

        &#{$rowChild}-grow {
          flex-grow: 1;
        }

        &#{$boundary}#{$prefix}--horizontalOverflow {
          flex-shrink: 1;
          width: 0;

          & > #{$boundaryCore} {
            width: 100%;
          }
        }

        &#{$rowChild}-alignStart {
          align-self: flex-start;
        }
        &#{$rowChild}-alignCenter {
          align-self: center;
        }
        &#{$rowChild}-alignEnd {
          align-self: flex-end;
        }
      }
    }

    &#{$widthMinSize} {
      display: block;

      & > #{$rowChild} {
        width: auto;

        &#{$row} {
          &#{$widthFlex}, &#{$widthMaxSize} {
            display: inline-flex;
          }

          &#{$widthMinSize} {
            display: inline-block;
          }
        }

        &#{$column} {
          &#{$heightFlex}, &#{$heightMaxSize} {
            display: inline-flex;
          }

          &#{$heightMinSize} {
            display: inline-block;
          }
        }

        &#{$boundary} {
          display: inline-block;
        }

        &#{$rowChild}-alignStart {
          margin-right: auto;
        }

        &#{$rowChild}-alignCenter {
          margin: 0 auto;
        }

        &#{$rowChild}-alignEnd {
          margin-left: auto;
        }
      }
    }
  }

  &--column {
    &#{$column}-justifyStart {
      justify-content: flex-start;
    }
    &#{$column}-justifyCenter {
      justify-content: center;
    }
    &#{$column}-justifyEnd {
      justify-content: flex-end;
    }

    &#{$heightFlex}, &#{$heightMaxSize} {
      display: flex;
      flex-direction: column;

      & > #{$columnChild} {
        height: auto;
        flex-grow: 0;
        flex-shrink: 0;

        &#{$columnChild}-grow {
          flex-grow: 1;
        }

        &#{$boundary}#{$prefix}--verticalOverflow {
          flex-shrink: 1;
          height: 0;

          & > #{$boundaryCore} {
            height: 100%;
          }
        }

        &#{$columnChild}-alignStart {
          align-self: flex-start;
        }
        &#{$columnChild}-alignCenter {
          align-self: center;
        }
        &#{$columnChild}-alignEnd {
          align-self: flex-end;
        }
      }
    }

    &#{$heightMinSize} {
      display: block;

      & > #{$columnChild} {
        height: auto;

        &#{$columnChild}-alignStart {
          margin-right: auto;
        }

        &#{$columnChild}-alignCenter {
          margin: 0 auto;
        }

        &#{$columnChild}-alignEnd {
          margin-left: auto;
        }
      }
    }
  }

  &--boundaryContent {
    height: 100%;
    width: 100%;

    &#{$boundary}#{$heightFlex} {
      max-height: calc(var(--max-height) + var(--outer-gap-y));
    }

    &#{$boundary}#{$heightMaxSize} {
      height: calc(var(--max-height) + var(--outer-gap-y));
    }

    &#{$boundary}#{$heightMinSize} {
      height: auto;
      min-height: calc(var(--min-height) + var(--outer-gap-y));
    }

    &#{$boundary}#{$widthFlex} {
      max-width: calc(var(--max-width) + var(--outer-gap-x));
    }

    &#{$boundary}#{$widthMaxSize} {
      width: calc(var(--max-width) + var(--outer-gap-x));
    }

    &#{$boundary}#{$widthMinSize} {
      width: auto;
      min-width: calc(var(--min-width) + var(--outer-gap-x));
    }
  }

  &--rowChild, &--columnChild {
    height: 100%;
    width: 100%;
  }

  &--boundary {
    &#{$rowChild}, &#{$columnChild} {
      &#{$heightFlex} {
        min-height: calc(var(--min-height) + var(--outer-gap-y));

        &#{$boundary}-hasMaxHeight {
          max-height: calc(var(--max-height) + var(--outer-gap-y));

          & > #{$boundaryCore} {
            max-height: var(--max-height);
          }
        }
      }

      &#{$widthFlex} {
        min-width: calc(var(--min-width) + var(--outer-gap-x));

        &#{$boundary}-hasMaxWidth {
          max-width: calc(var(--max-width) + var(--outer-gap-x));

          & > #{$boundaryCore} {
            max-width: var(--max-width);
          }
        }
      }

      &#{$heightMaxSize}#{$boundary}-hasMaxHeight {
        height: calc(var(--max-height) + var(--outer-gap-y));

        & > #{$boundaryCore} {
          height: var(--max-height);
        }
      }

      &#{$widthMaxSize}#{$boundary}-hasMaxWidth {
        width: calc(var(--max-width) + var(--outer-gap-x));

        & > #{$boundaryCore} {
          width: var(--max-width);
        }
      }

      &#{$heightMinSize}#{$boundary} {
        height: auto;
        min-height: calc(var(--min-height) + var(--outer-gap-y));

        & > #{$boundaryCore} {
          height: auto;
          min-height: var(--min-height);
        }

        &#{$prefix}--verticalOverflow {
          height: calc(var(--min-height) + var(--outer-gap-y));

          & > #{$boundaryCore} {
            height: var(--min-height);
          }
        }
      }

      &#{$widthMinSize}#{$boundary} {
        width: auto;
        min-width: calc(var(--min-width) + var(--outer-gap-x));

        & > #{$boundaryCore} {
          width: auto;
          min-width: var(--min-width);
        }

        &#{$prefix}--horizontalOverflow {
          width: calc(var(--min-width) + var(--outer-gap-x));

          & > #{$boundaryCore} {
            width: var(--min-width);
          }
        }
      }
    }
  }
}
